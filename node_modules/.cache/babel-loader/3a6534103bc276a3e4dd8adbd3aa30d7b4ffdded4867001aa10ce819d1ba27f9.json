{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.js\nimport { polygon as createPolygon, multiPolygon } from \"@turf/helpers\";\nimport polygonClipping from \"polygon-clipping\";\nfunction mask(polygon, mask2) {\n  var maskPolygon = createMask(mask2);\n  var polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") polygonOuters = unionFc(polygon);else polygonOuters = createGeomFromPolygonClippingOutput(polygonClipping.union(polygon.geometry.coordinates));\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n  return maskPolygon;\n}\n__name(mask, \"mask\");\nfunction unionFc(fc) {\n  var unioned = fc.features.length === 2 ? polygonClipping.union(fc.features[0].geometry.coordinates, fc.features[1].geometry.coordinates) : polygonClipping.union.apply(polygonClipping, fc.features.map(function (f) {\n    return f.geometry.coordinates;\n  }));\n  return createGeomFromPolygonClippingOutput(unioned);\n}\n__name(unionFc, \"unionFc\");\nfunction createGeomFromPolygonClippingOutput(unioned) {\n  return multiPolygon(unioned);\n}\n__name(createGeomFromPolygonClippingOutput, \"createGeomFromPolygonClippingOutput\");\nfunction createMask(mask2) {\n  var world = [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]];\n  var coordinates = mask2 && mask2.geometry.coordinates || world;\n  return createPolygon(coordinates);\n}\n__name(createMask, \"createMask\");\nvar turf_mask_default = mask;\nexport { turf_mask_default as default, mask };","map":{"version":3,"names":["polygon","createPolygon","multiPolygon","polygonClipping","mask","mask2","maskPolygon","createMask","polygonOuters","type","unionFc","createGeomFromPolygonClippingOutput","union","geometry","coordinates","forEach","contour","push","__name","fc","unioned","features","length","apply","map","f","world","turf_mask_default"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/mask/index.js"],"sourcesContent":["import { polygon as createPolygon, multiPolygon } from \"@turf/helpers\";\nimport polygonClipping from \"polygon-clipping\";\n\n/**\n * Takes any type of {@link Polygon|polygon} and an optional mask and returns a {@link Polygon|polygon} exterior ring with holes.\n *\n * @name mask\n * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Polygon used as interior rings or holes.\n * @param {Feature<Polygon>} [mask] GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)\n * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes).\n * @example\n * var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\n * var mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n *\n * var masked = turf.mask(polygon, mask);\n *\n * //addToMap\n * var addToMap = [masked]\n */\nfunction mask(polygon, mask) {\n  // Define mask\n  var maskPolygon = createMask(mask);\n\n  var polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") polygonOuters = unionFc(polygon);\n  else\n    polygonOuters = createGeomFromPolygonClippingOutput(\n      polygonClipping.union(polygon.geometry.coordinates)\n    );\n\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n\n  return maskPolygon;\n}\n\nfunction unionFc(fc) {\n  var unioned =\n    fc.features.length === 2\n      ? polygonClipping.union(\n          fc.features[0].geometry.coordinates,\n          fc.features[1].geometry.coordinates\n        )\n      : polygonClipping.union.apply(\n          polygonClipping,\n          fc.features.map(function (f) {\n            return f.geometry.coordinates;\n          })\n        );\n  return createGeomFromPolygonClippingOutput(unioned);\n}\n\nfunction createGeomFromPolygonClippingOutput(unioned) {\n  return multiPolygon(unioned);\n}\n\n/**\n * Create Mask Coordinates\n *\n * @private\n * @param {Feature<Polygon>} [mask] default to world if undefined\n * @returns {Feature<Polygon>} mask coordinate\n */\nfunction createMask(mask) {\n  var world = [\n    [\n      [180, 90],\n      [-180, 90],\n      [-180, -90],\n      [180, -90],\n      [180, 90],\n    ],\n  ];\n  var coordinates = (mask && mask.geometry.coordinates) || world;\n  return createPolygon(coordinates);\n}\n\nexport { mask };\nexport default mask;\n"],"mappings":";;;;;;;AAAA,SAASA,OAAA,IAAWC,aAAA,EAAeC,YAAA,QAAoB;AACvD,OAAOC,eAAA,MAAqB;AAkB5B,SAASC,KAAKJ,OAAA,EAASK,KAAA,EAAM;EAE3B,IAAIC,WAAA,GAAcC,UAAA,CAAWF,KAAI;EAEjC,IAAIG,aAAA,GAAgB;EACpB,IAAIR,OAAA,CAAQS,IAAA,KAAS,qBAAqBD,aAAA,GAAgBE,OAAA,CAAQV,OAAO,OAEvEQ,aAAA,GAAgBG,mCAAA,CACdR,eAAA,CAAgBS,KAAA,CAAMZ,OAAA,CAAQa,QAAA,CAASC,WAAW,CACpD;EAEFN,aAAA,CAAcK,QAAA,CAASC,WAAA,CAAYC,OAAA,CAAQ,UAAUC,OAAA,EAAS;IAC5DV,WAAA,CAAYO,QAAA,CAASC,WAAA,CAAYG,IAAA,CAAKD,OAAA,CAAQ,CAAC,CAAC;EAClD,CAAC;EAED,OAAOV,WAAA;AACT;AAhBSY,MAAA,CAAAd,IAAA;AAkBT,SAASM,QAAQS,EAAA,EAAI;EACnB,IAAIC,OAAA,GACFD,EAAA,CAAGE,QAAA,CAASC,MAAA,KAAW,IACnBnB,eAAA,CAAgBS,KAAA,CACdO,EAAA,CAAGE,QAAA,CAAS,CAAC,EAAER,QAAA,CAASC,WAAA,EACxBK,EAAA,CAAGE,QAAA,CAAS,CAAC,EAAER,QAAA,CAASC,WAC1B,IACAX,eAAA,CAAgBS,KAAA,CAAMW,KAAA,CACpBpB,eAAA,EACAgB,EAAA,CAAGE,QAAA,CAASG,GAAA,CAAI,UAAUC,CAAA,EAAG;IAC3B,OAAOA,CAAA,CAAEZ,QAAA,CAASC,WAAA;EACpB,CAAC,CACH;EACN,OAAOH,mCAAA,CAAoCS,OAAO;AACpD;AAdSF,MAAA,CAAAR,OAAA;AAgBT,SAASC,oCAAoCS,OAAA,EAAS;EACpD,OAAOlB,YAAA,CAAakB,OAAO;AAC7B;AAFSF,MAAA,CAAAP,mCAAA;AAWT,SAASJ,WAAWF,KAAA,EAAM;EACxB,IAAIqB,KAAA,GAAQ,CACV,CACE,CAAC,KAAK,EAAE,GACR,CAAC,MAAM,EAAE,GACT,CAAC,MAAM,GAAG,GACV,CAAC,KAAK,GAAG,GACT,CAAC,KAAK,EAAE,EACV,CACF;EACA,IAAIZ,WAAA,GAAeT,KAAA,IAAQA,KAAA,CAAKQ,QAAA,CAASC,WAAA,IAAgBY,KAAA;EACzD,OAAOzB,aAAA,CAAca,WAAW;AAClC;AAZSI,MAAA,CAAAX,UAAA;AAeT,IAAOoB,iBAAA,GAAQvB,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}