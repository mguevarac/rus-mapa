{"ast":null,"code":"var _jsxFileName = \"/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\nimport buffer from \"@turf/buffer\";\nimport booleanIntersects from \"@turf/boolean-intersects\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst icon = L.icon({\n  iconUrl: \"./placeholder.png\",\n  iconSize: [38, 38]\n});\nconst position = [19.432608, -99.133209];\nfunction ResetCenterView(props) {\n  _s();\n  const {\n    selectPosition\n  } = props;\n  const map = useMap();\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView(L.latLng(selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lat, selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lon), map.getZoom(), {\n        animate: true\n      });\n    }\n  }, [selectPosition, map]);\n  return null;\n}\n_s(ResetCenterView, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ResetCenterView;\nfunction Maps(props) {\n  _s2();\n  const {\n    selectPosition\n  } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [selectedPolygon, setSelectedPolygon] = useState(null);\n  const locationSelection = [selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lat, selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lon];\n  useEffect(() => {\n    fetch(\"/agebs.geojson\").then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setGeoData(data);\n    }).catch(error => {\n      console.error(\"Error fetching the GeoJSON data:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const pt = turf.point([selectPosition.lon, selectPosition.lat]);\n      const containingPolygon = geoData.features.find(feature => {\n        return booleanPointInPolygon(pt, feature);\n      });\n      if (containingPolygon) {\n        setSelectedPolygon(containingPolygon);\n      } else {\n        console.log(\"No polygon found containing the point\");\n      }\n    }\n  }, [geoData, selectPosition]);\n\n  /* useEffect(() => {\n    if (geoData && selectPosition) {\n      const point = L.latLng(selectPosition.lat, selectPosition.lon);\n      const containingPolygon = geoData.features.find((feature) => {\n        const layer = L.geoJSON(feature);\n        return layer.getBounds().contains(point);\n      });\n      setSelectedPolygon(containingPolygon);\n    }\n  }, [geoData, selectPosition]); */\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [38, 38]\n  });\n  const styleFunction = feature => {\n    if (feature === selectedPolygon) {\n      return {\n        color: \"red\",\n        fillColor: \"red\",\n        fillOpacity: 0.3\n      };\n    }\n    return {\n      color: \"transparent\",\n      fillColor: \"transparent\"\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: position,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), selectPosition && /*#__PURE__*/_jsxDEV(Marker, {\n        position: locationSelection,\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"A pretty CSS3 popup. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 36\n          }, this), \" Easily customizable.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResetCenterView, {\n        selectPosition: selectPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), selectedPolygon && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: selectedPolygon,\n        style: {\n          color: \"blue\",\n          fillColor: \"blue\",\n          fillOpacity: 0.3\n        },\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"This is the AGEB containing the selected point.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, JSON.stringify(selectedPolygon), false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s2(Maps, \"ul4xhbHaDWvaxJz10vO6B4Oj6DE=\");\n_c2 = Maps;\nexport default Maps;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetCenterView\");\n$RefreshReg$(_c2, \"Maps\");","map":{"version":3,"names":["React","useEffect","useState","L","MapContainer","TileLayer","Marker","Popup","GeoJSON","Icon","useMap","buffer","booleanIntersects","point","booleanPointInPolygon","jsxDEV","_jsxDEV","icon","iconUrl","iconSize","position","ResetCenterView","props","_s","selectPosition","map","setView","latLng","lat","lon","getZoom","animate","_c","Maps","_s2","geoData","setGeoData","selectedPolygon","setSelectedPolygon","locationSelection","fetch","then","response","ok","Error","status","json","data","catch","error","console","pt","turf","containingPolygon","features","find","feature","log","customIcon","require","styleFunction","color","fillColor","fillOpacity","className","children","center","zoom","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","style","JSON","stringify","_c2","$RefreshReg$"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\n\nimport buffer from \"@turf/buffer\";\nimport booleanIntersects from \"@turf/boolean-intersects\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\n\nconst icon = L.icon({\n  iconUrl: \"./placeholder.png\",\n  iconSize: [38, 38],\n});\n\nconst position = [19.432608, -99.133209];\n\nfunction ResetCenterView(props) {\n  const { selectPosition } = props;\n  const map = useMap();\n\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView(\n        L.latLng(selectPosition?.lat, selectPosition?.lon),\n        map.getZoom(),\n        {\n          animate: true,\n        }\n      );\n    }\n  }, [selectPosition, map]);\n\n  return null;\n}\n\nfunction Maps(props) {\n  const { selectPosition } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [selectedPolygon, setSelectedPolygon] = useState(null);\n  const locationSelection = [selectPosition?.lat, selectPosition?.lon];\n\n  useEffect(() => {\n    fetch(\"/agebs.geojson\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setGeoData(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching the GeoJSON data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const pt = turf.point([selectPosition.lon, selectPosition.lat]);\n\n      const containingPolygon = geoData.features.find((feature) => {\n        return booleanPointInPolygon(pt, feature);\n      });\n\n      if (containingPolygon) {\n        setSelectedPolygon(containingPolygon);\n      } else {\n        console.log(\"No polygon found containing the point\");\n      }\n    }\n  }, [geoData, selectPosition]);\n\n  /* useEffect(() => {\n    if (geoData && selectPosition) {\n      const point = L.latLng(selectPosition.lat, selectPosition.lon);\n      const containingPolygon = geoData.features.find((feature) => {\n        const layer = L.geoJSON(feature);\n        return layer.getBounds().contains(point);\n      });\n      setSelectedPolygon(containingPolygon);\n    }\n  }, [geoData, selectPosition]); */\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [38, 38],\n  });\n\n  const styleFunction = (feature) => {\n    if (feature === selectedPolygon) {\n      return { color: \"red\", fillColor: \"red\", fillOpacity: 0.3 };\n    }\n    return { color: \"transparent\", fillColor: \"transparent\" };\n  };\n\n  return (\n    <div className=\"map-container\">\n      <MapContainer center={position} zoom={13}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {selectPosition && (\n          <Marker position={locationSelection} icon={customIcon}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        )}\n        <ResetCenterView selectPosition={selectPosition} />\n        {selectedPolygon && (\n          <GeoJSON\n            key={JSON.stringify(selectedPolygon)}\n            data={selectedPolygon}\n            style={{ color: \"blue\", fillColor: \"blue\", fillOpacity: 0.3 }}\n          >\n            <Popup>This is the AGEB containing the selected point.</Popup>\n          </GeoJSON>\n        )}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Maps;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}