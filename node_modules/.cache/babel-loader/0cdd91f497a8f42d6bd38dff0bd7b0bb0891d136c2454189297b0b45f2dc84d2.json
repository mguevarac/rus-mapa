{"ast":null,"code":"var _jsxFileName = \"/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/AGEBInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\n\n//import buffer from \"@turf/buffer\";\n//import booleanIntersects from \"@turf/boolean-intersects\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AGEBInfo({\n  ageb\n}) {\n  _s();\n  const {\n    selectPosition\n  } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [setSelectedPolygon] = useState(null);\n  useEffect(() => {\n    fetch(\"/agebs.geojson\").then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setGeoData(data);\n    }).catch(error => {\n      console.error(\"Error fetching the GeoJSON data:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const lat = parseFloat(selectPosition.lat);\n      const lon = parseFloat(selectPosition.lon);\n      if (!isNaN(lat) && !isNaN(lon)) {\n        try {\n          const pt = point([lon, lat]);\n          const containingPolygon = geoData.features.find(feature => {\n            return booleanPointInPolygon(pt, feature);\n          });\n          setSelectedPolygon(containingPolygon);\n          console.log(\"Selected polygon:\", containingPolygon);\n        } catch (error) {\n          console.error(\"Error in polygon selection:\", error);\n        }\n      } else {\n        console.error(\"Invalid coordinates:\", selectPosition);\n      }\n    }\n  }, [geoData, selectPosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ageb-info\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Neighborhood Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AGEBInfo, \"kku/av0f2T/MW4jlspMWgjyqnWs=\");\n_c = AGEBInfo;\nexport default AGEBInfo;\nvar _c;\n$RefreshReg$(_c, \"AGEBInfo\");","map":{"version":3,"names":["React","useEffect","useState","L","MapContainer","TileLayer","Marker","Popup","GeoJSON","Icon","useMap","point","booleanPointInPolygon","jsxDEV","_jsxDEV","AGEBInfo","ageb","_s","selectPosition","props","geoData","setGeoData","setSelectedPolygon","fetch","then","response","ok","Error","status","json","data","catch","error","console","lat","lon","parseFloat","isNaN","pt","containingPolygon","features","find","feature","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/AGEBInfo.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\n\n//import buffer from \"@turf/buffer\";\n//import booleanIntersects from \"@turf/boolean-intersects\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\n\nfunction AGEBInfo({ ageb }) {\n  const { selectPosition } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [setSelectedPolygon] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/agebs.geojson\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setGeoData(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching the GeoJSON data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const lat = parseFloat(selectPosition.lat);\n      const lon = parseFloat(selectPosition.lon);\n\n      if (!isNaN(lat) && !isNaN(lon)) {\n        try {\n          const pt = point([lon, lat]);\n\n          const containingPolygon = geoData.features.find((feature) => {\n            return booleanPointInPolygon(pt, feature);\n          });\n\n          setSelectedPolygon(containingPolygon);\n          console.log(\"Selected polygon:\", containingPolygon);\n        } catch (error) {\n          console.error(\"Error in polygon selection:\", error);\n        }\n      } else {\n        console.error(\"Invalid coordinates:\", selectPosition);\n      }\n    }\n  }, [geoData, selectPosition]);\n\n  return (\n    <div className=\"ageb-info\">\n      <h2>Neighborhood Information</h2>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n        tempor incididunt ut labore et dolore magna aliqua.\n      </p>\n      {/* Add more neighborhood information here */}\n    </div>\n  );\n}\n\nexport default AGEBInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}