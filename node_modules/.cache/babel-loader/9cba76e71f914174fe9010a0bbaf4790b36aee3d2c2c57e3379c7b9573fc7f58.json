{"ast":null,"code":"var _jsxFileName = \"/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport AGEBInfo from \"./AGEBInfo\"; // Import AGEBInfo component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst position = [19.432608, -99.133209];\nfunction ResetCenterView(props) {\n  _s();\n  const {\n    selectPosition\n  } = props;\n  const map = useMap();\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView([selectPosition.lat, selectPosition.lon], 16); // Zoom to level 16, adjust as needed\n    }\n  }, [selectPosition, map]);\n  return null;\n}\n_s(ResetCenterView, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ResetCenterView;\nfunction Maps(props) {\n  _s2();\n  const {\n    selectPosition\n  } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [isSelected, setIsSelected] = useState(false); // Track if an item is selected\n\n  const locationSelection = [selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lat, selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lon];\n  useEffect(() => {\n    fetch(\"/agebs.geojson\").then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setGeoData(data);\n    }).catch(error => {\n      console.error(\"Error fetching the GeoJSON data:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const lat = parseFloat(selectPosition.lat);\n      const lon = parseFloat(selectPosition.lon);\n      if (!isNaN(lat) && !isNaN(lon)) {\n        try {\n          const pt = point([lon, lat]);\n          const containingPolygon = geoData.features.find(feature => {\n            return booleanPointInPolygon(pt, feature);\n          });\n          setSelectedPlace(containingPolygon); // Set selectedPlace here\n          setIsSelected(true); // Mark as selected\n          console.log(\"Selected polygon:\", containingPolygon);\n        } catch (error) {\n          console.error(\"Error in polygon selection:\", error);\n        }\n      } else {\n        console.error(\"Invalid coordinates:\", selectPosition);\n      }\n    }\n  }, [geoData, selectPosition]);\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [22, 48]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      center: position,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), selectPosition && /*#__PURE__*/_jsxDEV(Marker, {\n        position: locationSelection,\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"A pretty CSS3 popup. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 36\n          }, this), \" Easily customizable.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResetCenterView, {\n        selectPosition: selectPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), selectedPlace && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: selectedPlace,\n        style: {\n          color: \"#6689A1\",\n          fillColor: \"#6689A1\",\n          fillOpacity: 0.3\n        },\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"This is the AGEB containing the selected point.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, JSON.stringify(selectedPlace), false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), isSelected && selectedPlace && /*#__PURE__*/_jsxDEV(AGEBInfo, {\n      ageb: selectedPlace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s2(Maps, \"O3A66cC0SHqmRn2Xc6RehWyH3SA=\");\n_c2 = Maps;\nexport default Maps;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetCenterView\");\n$RefreshReg$(_c2, \"Maps\");","map":{"version":3,"names":["React","useEffect","useState","L","MapContainer","TileLayer","Marker","Popup","GeoJSON","Icon","useMap","point","booleanPointInPolygon","AGEBInfo","jsxDEV","_jsxDEV","position","ResetCenterView","props","_s","selectPosition","map","setView","lat","lon","_c","Maps","_s2","geoData","setGeoData","selectedPlace","setSelectedPlace","isSelected","setIsSelected","locationSelection","fetch","then","response","ok","Error","status","json","data","catch","error","console","parseFloat","isNaN","pt","containingPolygon","features","find","feature","log","customIcon","iconUrl","require","iconSize","className","children","center","zoom","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","icon","style","color","fillColor","fillOpacity","JSON","stringify","ageb","_c2","$RefreshReg$"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport { useMap } from \"react-leaflet/hooks\";\nimport { point } from \"@turf/helpers\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport AGEBInfo from \"./AGEBInfo\"; // Import AGEBInfo component\n\nconst position = [19.432608, -99.133209];\n\nfunction ResetCenterView(props) {\n  const { selectPosition } = props;\n  const map = useMap();\n\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView([selectPosition.lat, selectPosition.lon], 16); // Zoom to level 16, adjust as needed\n    }\n  }, [selectPosition, map]);\n\n  return null;\n}\n\nfunction Maps(props) {\n  const { selectPosition } = props;\n  const [geoData, setGeoData] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [isSelected, setIsSelected] = useState(false); // Track if an item is selected\n\n  const locationSelection = [selectPosition?.lat, selectPosition?.lon];\n\n  useEffect(() => {\n    fetch(\"/agebs.geojson\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setGeoData(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching the GeoJSON data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (geoData && selectPosition && selectPosition.lat && selectPosition.lon) {\n      const lat = parseFloat(selectPosition.lat);\n      const lon = parseFloat(selectPosition.lon);\n\n      if (!isNaN(lat) && !isNaN(lon)) {\n        try {\n          const pt = point([lon, lat]);\n\n          const containingPolygon = geoData.features.find((feature) => {\n            return booleanPointInPolygon(pt, feature);\n          });\n\n          setSelectedPlace(containingPolygon); // Set selectedPlace here\n          setIsSelected(true); // Mark as selected\n          console.log(\"Selected polygon:\", containingPolygon);\n        } catch (error) {\n          console.error(\"Error in polygon selection:\", error);\n        }\n      } else {\n        console.error(\"Invalid coordinates:\", selectPosition);\n      }\n    }\n  }, [geoData, selectPosition]);\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [22, 48],\n  });\n\n  return (\n    <div className=\"map-container\">\n      <MapContainer center={position} zoom={13}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {selectPosition && (\n          <Marker position={locationSelection} icon={customIcon}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        )}\n        <ResetCenterView selectPosition={selectPosition} />\n        {selectedPlace && (\n          <GeoJSON\n            key={JSON.stringify(selectedPlace)}\n            data={selectedPlace}\n            style={{ color: \"#6689A1\", fillColor: \"#6689A1\", fillOpacity: 0.3 }}\n          >\n            <Popup>This is the AGEB containing the selected point.</Popup>\n          </GeoJSON>\n        )}\n      </MapContainer>\n      {isSelected && selectedPlace && <AGEBInfo ageb={selectedPlace} />}\n    </div>\n  );\n}\n\nexport default Maps;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}