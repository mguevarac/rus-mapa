{"ast":null,"code":"var _jsxFileName = \"/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, GeoJSON, Marker, Popup } from \"react-leaflet\";\nimport { Icon, divIcon } from \"leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport { useMap } from \"react-leaflet/hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst icon = L.icon({\n  iconUrl: \"./placeholder.png\",\n  iconSize: [38, 38]\n});\nconst position = [19.432608, -99.133209];\nfunction ResetCenterView(props) {\n  _s();\n  const {\n    selectPosition\n  } = props;\n  const map = useMap();\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView(L.latLng(selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lat, selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lon), map.getZoom(), {\n        animate: true\n      });\n    }\n  }, [selectPosition]);\n  return null;\n}\n_s(ResetCenterView, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ResetCenterView;\nfunction Maps(props) {\n  _s2();\n  const {\n    selectPosition\n  } = props;\n  const locationSelection = [selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lat, selectPosition === null || selectPosition === void 0 ? void 0 : selectPosition.lon];\n  const [agebsGeoJSON, setAgebsGeoJSON] = useState(null);\n\n  // Test Markers\n  const markers = [{\n    geocode: [19.50387, -99.20958],\n    popUp: \"Test 1\"\n  }, {\n    geocode: [19.42881, -99.194679],\n    popUp: \"Test 2\"\n  }, {\n    geocode: [19.428512573242188, -99.16178131103516],\n    popUp: \"Test 3\"\n  }];\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [38, 38]\n  });\n  useEffect(() => {\n    // Load agebs_counts_updated.geojson\n    fetch(\"/path/to/agebs_counts_updated.geojson\").then(response => response.json()).then(data => {\n      setAgebsGeoJSON(data);\n    }).catch(error => console.error(\"Error loading Agebs GeoJSON:\", error));\n  }, []);\n\n  // Function to handle finding and highlighting Ageb\n  const highlightAgeb = (agebGeoJSON, userPosition) => {\n    if (!agebGeoJSON || !userPosition) return;\n\n    // Loop through features to find the Ageb containing user's position\n    agebGeoJSON.features.forEach(feature => {\n      const polygon = L.geoJSON(feature.geometry);\n      if (polygon.getBounds().contains(userPosition)) {\n        // Highlight or style the Ageb polygon\n        // For example, set a specific style or store selected Ageb ID in state\n        console.log(\"Selected Ageb:\", feature.properties.CVE_AGEB);\n      }\n    });\n  };\n\n  // Call highlightAgeb whenever selectPosition changes\n  useEffect(() => {\n    highlightAgeb(agebsGeoJSON, selectPosition);\n  }, [selectPosition, agebsGeoJSON]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: position,\n      zoom: 13,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), selectPosition && /*#__PURE__*/_jsxDEV(Marker, {\n        position: locationSelection,\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"A pretty CSS3 popup. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 36\n          }, this), \" Easily customizable.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResetCenterView, {\n        selectPosition: selectPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        url: \"/assets/agebs_counts_updated.geojson\" // Replace with the actual path to your GeoJSON file\n        ,\n        style: () => ({\n          color: \"blue\",\n          // Change polygon color here\n          weight: 1,\n          fillOpacity: 1\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s2(Maps, \"KYwzseGywL7P42NIALxrgCBRub4=\");\n_c2 = Maps;\nexport default Maps;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetCenterView\");\n$RefreshReg$(_c2, \"Maps\");","map":{"version":3,"names":["React","useEffect","useState","L","MapContainer","TileLayer","GeoJSON","Marker","Popup","Icon","divIcon","MarkerClusterGroup","useMap","jsxDEV","_jsxDEV","icon","iconUrl","iconSize","position","ResetCenterView","props","_s","selectPosition","map","setView","latLng","lat","lon","getZoom","animate","_c","Maps","_s2","locationSelection","agebsGeoJSON","setAgebsGeoJSON","markers","geocode","popUp","customIcon","require","fetch","then","response","json","data","catch","error","console","highlightAgeb","agebGeoJSON","userPosition","features","forEach","feature","polygon","geoJSON","geometry","getBounds","contains","log","properties","CVE_AGEB","className","children","center","zoom","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","style","color","weight","fillOpacity","_c2","$RefreshReg$"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/src/Maps.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n\nimport { MapContainer, TileLayer, GeoJSON, Marker, Popup } from \"react-leaflet\";\nimport { Icon, divIcon } from \"leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport { useMap } from \"react-leaflet/hooks\";\n\nconst icon = L.icon({\n  iconUrl: \"./placeholder.png\",\n  iconSize: [38, 38],\n});\n\nconst position = [19.432608, -99.133209];\n\nfunction ResetCenterView(props) {\n  const { selectPosition } = props;\n  const map = useMap();\n\n  useEffect(() => {\n    if (selectPosition) {\n      map.setView(\n        L.latLng(selectPosition?.lat, selectPosition?.lon),\n        map.getZoom(),\n        {\n          animate: true,\n        }\n      );\n    }\n  }, [selectPosition]);\n\n  return null;\n}\n\nfunction Maps(props) {\n  const { selectPosition } = props;\n  const locationSelection = [selectPosition?.lat, selectPosition?.lon];\n  const [agebsGeoJSON, setAgebsGeoJSON] = useState(null);\n\n  // Test Markers\n  const markers = [\n    {\n      geocode: [19.50387, -99.20958],\n      popUp: \"Test 1\",\n    },\n    {\n      geocode: [19.42881, -99.194679],\n      popUp: \"Test 2\",\n    },\n    {\n      geocode: [19.428512573242188, -99.16178131103516],\n      popUp: \"Test 3\",\n    },\n  ];\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./assets/marker.png\"),\n    iconSize: [38, 38],\n  });\n\n  useEffect(() => {\n    // Load agebs_counts_updated.geojson\n    fetch(\"/path/to/agebs_counts_updated.geojson\")\n      .then((response) => response.json())\n      .then((data) => {\n        setAgebsGeoJSON(data);\n      })\n      .catch((error) => console.error(\"Error loading Agebs GeoJSON:\", error));\n  }, []);\n\n  // Function to handle finding and highlighting Ageb\n  const highlightAgeb = (agebGeoJSON, userPosition) => {\n    if (!agebGeoJSON || !userPosition) return;\n\n    // Loop through features to find the Ageb containing user's position\n    agebGeoJSON.features.forEach((feature) => {\n      const polygon = L.geoJSON(feature.geometry);\n      if (polygon.getBounds().contains(userPosition)) {\n        // Highlight or style the Ageb polygon\n        // For example, set a specific style or store selected Ageb ID in state\n        console.log(\"Selected Ageb:\", feature.properties.CVE_AGEB);\n      }\n    });\n  };\n\n  // Call highlightAgeb whenever selectPosition changes\n  useEffect(() => {\n    highlightAgeb(agebsGeoJSON, selectPosition);\n  }, [selectPosition, agebsGeoJSON]);\n\n  return (\n    <div className=\"map-container\">\n      <MapContainer center={position} zoom={13}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n\n        {selectPosition && (\n          <Marker position={locationSelection} icon={customIcon}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        )}\n        <ResetCenterView selectPosition={selectPosition} />\n\n        <GeoJSON\n          url=\"/assets/agebs_counts_updated.geojson\" // Replace with the actual path to your GeoJSON file\n          style={() => ({\n            color: \"blue\", // Change polygon color here\n            weight: 1,\n            fillOpacity: 1,\n          })}\n        />\n\n        {/* <MarkerClusterGroup chunkedLoading>\n          {markers.map((marker) => (\n            <Marker position={marker.geocode} icon={customIcon}>\n              <Popup>\n                <h2>{marker.popUp}</h2>\n              </Popup>\n            </Marker>\n          ))}\n        </MarkerClusterGroup> */}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Maps;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;AAEvB,SAASC,YAAY,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAC/E,SAASC,IAAI,EAAEC,OAAO,QAAQ,SAAS;AACvC,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,SAASC,MAAM,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,IAAI,GAAGZ,CAAC,CAACY,IAAI,CAAC;EAClBC,OAAO,EAAE,mBAAmB;EAC5BC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAG,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;AAExC,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAe,CAAC,GAAGF,KAAK;EAChC,MAAMG,GAAG,GAAGX,MAAM,CAAC,CAAC;EAEpBX,SAAS,CAAC,MAAM;IACd,IAAIqB,cAAc,EAAE;MAClBC,GAAG,CAACC,OAAO,CACTrB,CAAC,CAACsB,MAAM,CAACH,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEI,GAAG,EAAEJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,GAAG,CAAC,EAClDJ,GAAG,CAACK,OAAO,CAAC,CAAC,EACb;QACEC,OAAO,EAAE;MACX,CACF,CAAC;IACH;EACF,CAAC,EAAE,CAACP,cAAc,CAAC,CAAC;EAEpB,OAAO,IAAI;AACb;AAACD,EAAA,CAjBQF,eAAe;EAAA,QAEVP,MAAM;AAAA;AAAAkB,EAAA,GAFXX,eAAe;AAmBxB,SAASY,IAAIA,CAACX,KAAK,EAAE;EAAAY,GAAA;EACnB,MAAM;IAAEV;EAAe,CAAC,GAAGF,KAAK;EAChC,MAAMa,iBAAiB,GAAG,CAACX,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEI,GAAG,EAAEJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,GAAG,CAAC;EACpE,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMkC,OAAO,GAAG,CACd;IACEC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;IAC9BC,KAAK,EAAE;EACT,CAAC,EACD;IACED,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;IAC/BC,KAAK,EAAE;EACT,CAAC,EACD;IACED,OAAO,EAAE,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC;IACjDC,KAAK,EAAE;EACT,CAAC,CACF;EAED,MAAMC,UAAU,GAAG,IAAI9B,IAAI,CAAC;IAC1BO,OAAO,EAAEwB,OAAO,CAAC,qBAAqB,CAAC;IACvCvB,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd;IACAwC,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdV,eAAe,CAACU,IAAI,CAAC;IACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,aAAa,GAAGA,CAACC,WAAW,EAAEC,YAAY,KAAK;IACnD,IAAI,CAACD,WAAW,IAAI,CAACC,YAAY,EAAE;;IAEnC;IACAD,WAAW,CAACE,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAK;MACxC,MAAMC,OAAO,GAAGpD,CAAC,CAACqD,OAAO,CAACF,OAAO,CAACG,QAAQ,CAAC;MAC3C,IAAIF,OAAO,CAACG,SAAS,CAAC,CAAC,CAACC,QAAQ,CAACR,YAAY,CAAC,EAAE;QAC9C;QACA;QACAH,OAAO,CAACY,GAAG,CAAC,gBAAgB,EAAEN,OAAO,CAACO,UAAU,CAACC,QAAQ,CAAC;MAC5D;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA7D,SAAS,CAAC,MAAM;IACdgD,aAAa,CAACf,YAAY,EAAEZ,cAAc,CAAC;EAC7C,CAAC,EAAE,CAACA,cAAc,EAAEY,YAAY,CAAC,CAAC;EAElC,oBACEpB,OAAA;IAAKiD,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BlD,OAAA,CAACV,YAAY;MAAC6D,MAAM,EAAE/C,QAAS;MAACgD,IAAI,EAAE,EAAG;MAAAF,QAAA,gBACvClD,OAAA,CAACT,SAAS;QACR8D,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAgD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,EAEDlD,cAAc,iBACbR,OAAA,CAACP,MAAM;QAACW,QAAQ,EAAEe,iBAAkB;QAAClB,IAAI,EAAEwB,UAAW;QAAAyB,QAAA,eACpDlD,OAAA,CAACN,KAAK;UAAAwD,QAAA,GAAC,uBACgB,eAAAlD,OAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,yBAC7B;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CACT,eACD1D,OAAA,CAACK,eAAe;QAACG,cAAc,EAAEA;MAAe;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEnD1D,OAAA,CAACR,OAAO;QACN8D,GAAG,EAAC,sCAAsC,CAAC;QAAA;QAC3CK,KAAK,EAAEA,CAAA,MAAO;UACZC,KAAK,EAAE,MAAM;UAAE;UACfC,MAAM,EAAE,CAAC;UACTC,WAAW,EAAE;QACf,CAAC;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAACxC,GAAA,CA9FQD,IAAI;AAAA8C,GAAA,GAAJ9C,IAAI;AAgGb,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAA+C,GAAA;AAAAC,YAAA,CAAAhD,EAAA;AAAAgD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}