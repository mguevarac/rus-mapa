{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.js\nimport { feature, point, lineString, isObject } from \"@turf/helpers\";\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === \"Polygon\" || geomType === \"MultiPolygon\") ? 1 : 0;\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n__name(coordEach, \"coordEach\");\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (coordIndex === 0 && initialValue === void 0) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n  }, excludeWrapCoord);\n  return previousValue;\n}\n__name(coordReduce, \"coordReduce\");\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n__name(propEach, \"propEach\");\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === void 0) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n__name(propReduce, \"propReduce\");\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n__name(featureEach, \"featureEach\");\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === void 0) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n__name(featureReduce, \"featureReduce\");\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n__name(coordAll, \"coordAll\");\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : void 0;\n    featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : void 0;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n      if (geometry === null) {\n        if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n          {\n            if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            break;\n          }\n        case \"GeometryCollection\":\n          {\n            for (j = 0; j < geometry.geometries.length; j++) {\n              if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            }\n            break;\n          }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    featureIndex++;\n  }\n}\n__name(geomEach, \"geomEach\");\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n    if (featureIndex === 0 && initialValue === void 0) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n  });\n  return previousValue;\n}\n__name(geomReduce, \"geomReduce\");\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (callback(feature(geometry, properties, {\n          bbox,\n          id\n        }), featureIndex, 0) === false) return false;\n        return;\n    }\n    var geomType;\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n    for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n    }\n  });\n}\n__name(flattenEach, \"flattenEach\");\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n    if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === void 0) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n  });\n  return previousValue;\n}\n__name(flattenReduce, \"flattenReduce\");\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature2, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n    if (!feature2.geometry) return;\n    var type = feature2.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (coordEach(feature2, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n      if (previousCoords === void 0 || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n        previousCoords = currentCoord;\n        previousFeatureIndex = featureIndex;\n        previousMultiIndex = multiPartIndexCoord;\n        prevGeomIndex = geometryIndex;\n        segmentIndex = 0;\n        return;\n      }\n      var currentSegment = lineString([previousCoords, currentCoord], feature2.properties);\n      if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n      segmentIndex++;\n      previousCoords = currentCoord;\n    }) === false) return false;\n  });\n}\n__name(segmentEach, \"segmentEach\");\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n    if (started === false && initialValue === void 0) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n    started = true;\n  });\n  return previousValue;\n}\n__name(segmentReduce, \"segmentReduce\");\nfunction lineEach(geojson, callback) {\n  if (!geojson) throw new Error(\"geojson is required\");\n  flattenEach(geojson, function (feature2, featureIndex, multiFeatureIndex) {\n    if (feature2.geometry === null) return;\n    var type = feature2.geometry.type;\n    var coords = feature2.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature2, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n        break;\n      case \"Polygon\":\n        for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n          if (callback(lineString(coords[geometryIndex], feature2.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n        }\n        break;\n    }\n  });\n}\n__name(lineEach, \"lineEach\");\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (featureIndex === 0 && initialValue === void 0) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n  });\n  return previousValue;\n}\n__name(lineReduce, \"lineReduce\");\nfunction findSegment(geojson, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n  }\n  throw new Error(\"geojson is invalid\");\n}\n__name(findSegment, \"findSegment\");\nfunction findPoint(geojson, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n  }\n  throw new Error(\"geojson is invalid\");\n}\n__name(findPoint, \"findPoint\");\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };","map":{"version":3,"names":["feature","point","lineString","isObject","coordEach","geojson","callback","excludeWrapCoord","j","k","l","geometry","stopG","coords","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","type","isFeatureCollection","isFeature","stop","features","length","featureIndex","geometries","geomIndex","multiFeatureIndex","geometryIndex","coordinates","geomType","Error","__name","coordReduce","initialValue","previousValue","currentCoord","propEach","i","properties","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","coord","push","geomEach","g","featureProperties","featureBBox","featureId","bbox","id","geomReduce","currentGeometry","flattenEach","coordinate","geom","flattenReduce","segmentEach","feature2","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","options","findPoint"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/meta/index.js"],"sourcesContent":["import { feature, point, lineString, isObject } from \"@turf/helpers\";\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n        ? geojson.geometry\n        : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n        ? geojson.geometry\n        : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n        ? geojson.properties\n        : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n        ? geojson.bbox\n        : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n        ? geojson.id\n        : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport {\n  coordReduce,\n  coordEach,\n  propEach,\n  propReduce,\n  featureReduce,\n  featureEach,\n  coordAll,\n  geomReduce,\n  geomEach,\n  flattenReduce,\n  flattenEach,\n  segmentReduce,\n  segmentEach,\n  lineReduce,\n  lineEach,\n  findSegment,\n  findPoint,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}