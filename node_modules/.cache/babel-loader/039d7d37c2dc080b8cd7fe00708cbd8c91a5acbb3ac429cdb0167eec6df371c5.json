{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.js\nimport { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\nfunction coordsToPolygon(coords) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\n__name(coordsToPolygon, \"coordsToPolygon\");\nfunction voronoi2(points, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var bbox = options.bbox || [-180, -85, 180, 85];\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n  return featureCollection(d3voronoi.voronoi().x(function (feature) {\n    return feature.geometry.coordinates[0];\n  }).y(function (feature) {\n    return feature.geometry.coordinates[1];\n  }).extent([[bbox[0], bbox[1]], [bbox[2], bbox[3]]]).polygons(points.features).map(function (coords, index) {\n    return Object.assign(coordsToPolygon(coords), {\n      properties: cloneProperties(points.features[index].properties)\n    });\n  }));\n}\n__name(voronoi2, \"voronoi\");\nvar turf_voronoi_default = voronoi2;\nexport { turf_voronoi_default as default, voronoi2 as voronoi };","map":{"version":3,"names":["polygon","featureCollection","isObject","collectionOf","cloneProperties","d3voronoi","coordsToPolygon","coords","slice","push","__name","voronoi2","points","options","Error","bbox","Array","isArray","voronoi","x","feature","geometry","coordinates","y","extent","polygons","features","map","index","Object","assign","properties","turf_voronoi_default"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/voronoi/index.js"],"sourcesContent":["import { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\n\n/**\n * @private\n * @param {Array<Array<number>>} coords representing a polygon\n * @returns {Feature<Polygon>} polygon\n */\nfunction coordsToPolygon(coords) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\n\n/**\n * Takes a FeatureCollection of points, and a bounding box, and returns a FeatureCollection\n * of Voronoi polygons.\n *\n * The Voronoi algorithim used comes from the d3-voronoi package.\n *\n * @name voronoi\n * @param {FeatureCollection<Point>} points to find the Voronoi polygons around.\n * @param {Object} [options={}] Optional parameters\n * @param {number[]} [options.bbox=[-180, -85, 180, -85]] clipping rectangle, in [minX, minY, maxX, MaxY] order.\n * @returns {FeatureCollection<Polygon>} a set of polygons, one per input point.\n * @example\n * var options = {\n *   bbox: [-70, 40, -60, 60]\n * };\n * var points = turf.randomPoint(100, options);\n * var voronoiPolygons = turf.voronoi(points, options);\n *\n * //addToMap\n * var addToMap = [voronoiPolygons, points];\n */\nfunction voronoi(points, options) {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var bbox = options.bbox || [-180, -85, 180, 85];\n\n  // Input Validation\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n\n  // Main\n  return featureCollection(\n    d3voronoi\n      .voronoi()\n      .x(function (feature) {\n        return feature.geometry.coordinates[0];\n      })\n      .y(function (feature) {\n        return feature.geometry.coordinates[1];\n      })\n      .extent([\n        [bbox[0], bbox[1]],\n        [bbox[2], bbox[3]],\n      ])\n      .polygons(points.features)\n      .map(function (coords, index) {\n        return Object.assign(coordsToPolygon(coords), {\n          properties: cloneProperties(points.features[index].properties),\n        });\n      })\n  );\n}\n\nexport { voronoi };\nexport default voronoi;\n"],"mappings":";;;;;;;AAAA,SAASA,OAAA,EAASC,iBAAA,EAAmBC,QAAA,QAAgB;AACrD,SAASC,YAAA,QAAoB;AAC7B,SAASC,eAAA,QAAuB;AAChC,YAAYC,SAAA,MAAe;AAO3B,SAASC,gBAAgBC,MAAA,EAAQ;EAC/BA,MAAA,GAASA,MAAA,CAAOC,KAAA,CAAM;EACtBD,MAAA,CAAOE,IAAA,CAAKF,MAAA,CAAO,CAAC,CAAC;EACrB,OAAOP,OAAA,CAAQ,CAACO,MAAM,CAAC;AACzB;AAJSG,MAAA,CAAAJ,eAAA;AA2BT,SAASK,SAAQC,MAAA,EAAQC,OAAA,EAAS;EAEhCA,OAAA,GAAUA,OAAA,IAAW,CAAC;EACtB,IAAI,CAACX,QAAA,CAASW,OAAO,GAAG,MAAM,IAAIC,KAAA,CAAM,oBAAoB;EAC5D,IAAIC,IAAA,GAAOF,OAAA,CAAQE,IAAA,IAAQ,CAAC,MAAM,KAAK,KAAK,EAAE;EAG9C,IAAI,CAACH,MAAA,EAAQ,MAAM,IAAIE,KAAA,CAAM,oBAAoB;EACjD,IAAI,CAACE,KAAA,CAAMC,OAAA,CAAQF,IAAI,GAAG,MAAM,IAAID,KAAA,CAAM,iBAAiB;EAC3DX,YAAA,CAAaS,MAAA,EAAQ,SAAS,QAAQ;EAGtC,OAAOX,iBAAA,CAEFI,SAAA,CAAAa,OAAA,CAAQ,EACRC,CAAA,CAAE,UAAUC,OAAA,EAAS;IACpB,OAAOA,OAAA,CAAQC,QAAA,CAASC,WAAA,CAAY,CAAC;EACvC,CAAC,EACAC,CAAA,CAAE,UAAUH,OAAA,EAAS;IACpB,OAAOA,OAAA,CAAQC,QAAA,CAASC,WAAA,CAAY,CAAC;EACvC,CAAC,EACAE,MAAA,CAAO,CACN,CAACT,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,CAAC,GACjB,CAACA,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,CAAC,EAClB,EACAU,QAAA,CAASb,MAAA,CAAOc,QAAQ,EACxBC,GAAA,CAAI,UAAUpB,MAAA,EAAQqB,KAAA,EAAO;IAC5B,OAAOC,MAAA,CAAOC,MAAA,CAAOxB,eAAA,CAAgBC,MAAM,GAAG;MAC5CwB,UAAA,EAAY3B,eAAA,CAAgBQ,MAAA,CAAOc,QAAA,CAASE,KAAK,EAAEG,UAAU;IAC/D,CAAC;EACH,CAAC,CACL;AACF;AAhCSrB,MAAA,CAAAC,QAAA;AAmCT,IAAOqB,oBAAA,GAAQrB,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}