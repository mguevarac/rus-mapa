{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.ts\nimport { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nfunction polygonToLine(poly, options = {}) {\n  const geom = getGeom(poly);\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n  switch (geom.type) {\n    case \"Polygon\":\n      return singlePolygonToLine(geom, options);\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n__name(polygonToLine, \"polygonToLine\");\nfunction singlePolygonToLine(poly, options = {}) {\n  const geom = getGeom(poly);\n  const coords = geom.coordinates;\n  const properties = options.properties ? options.properties : poly.type === \"Feature\" ? poly.properties : {};\n  return coordsToLine(coords, properties);\n}\n__name(singlePolygonToLine, \"singlePolygonToLine\");\nfunction multiPolygonToLine(multiPoly, options = {}) {\n  const geom = getGeom(multiPoly);\n  const coords = geom.coordinates;\n  const properties = options.properties ? options.properties : multiPoly.type === \"Feature\" ? multiPoly.properties : {};\n  const lines = [];\n  coords.forEach(coord => {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n__name(multiPolygonToLine, \"multiPolygonToLine\");\nfunction coordsToLine(coords, properties) {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n  return lineString(coords[0], properties);\n}\n__name(coordsToLine, \"coordsToLine\");\nvar turf_polygon_to_line_default = polygonToLine;\nexport { coordsToLine, turf_polygon_to_line_default as default, multiPolygonToLine, polygonToLine, singlePolygonToLine };","map":{"version":3,"names":["featureCollection","lineString","multiLineString","getGeom","polygonToLine","poly","options","geom","properties","type","singlePolygonToLine","multiPolygonToLine","Error","__name","coords","coordinates","coordsToLine","multiPoly","lines","forEach","coord","push","length","turf_polygon_to_line_default"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/polygon-to-line/index.ts"],"sourcesContent":["import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nfunction polygonToLine<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  poly: Feature<G, P> | G,\n  options: { properties?: any } = {}\n):\n  | Feature<LineString | MultiLineString, P>\n  | FeatureCollection<LineString | MultiLineString, P> {\n  const geom: any = getGeom(poly);\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n  switch (geom.type) {\n    case \"Polygon\":\n      return singlePolygonToLine(geom, options);\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n\n/**\n * @private\n */\nfunction singlePolygonToLine<\n  G extends Polygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  poly: Feature<G, P> | G,\n  options: { properties?: any } = {}\n): Feature<LineString | MultiLineString, P> {\n  const geom = getGeom(poly);\n  const coords: any[] = geom.coordinates;\n  const properties: any = options.properties\n    ? options.properties\n    : poly.type === \"Feature\"\n      ? poly.properties\n      : {};\n\n  return coordsToLine(coords, properties);\n}\n\n/**\n * @private\n */\nfunction multiPolygonToLine<\n  G extends MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  multiPoly: Feature<G, P> | G,\n  options: { properties?: P } = {}\n): FeatureCollection<LineString | MultiLineString, P> {\n  const geom = getGeom(multiPoly);\n  const coords: any[] = geom.coordinates;\n  const properties: any = options.properties\n    ? options.properties\n    : multiPoly.type === \"Feature\"\n      ? multiPoly.properties\n      : {};\n\n  const lines: Array<Feature<LineString | MultiLineString, P>> = [];\n  coords.forEach((coord) => {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n\n/**\n * @private\n */\nfunction coordsToLine<P extends GeoJsonProperties = GeoJsonProperties>(\n  coords: number[][][],\n  properties: P\n): Feature<LineString | MultiLineString, P> {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n  return lineString(coords[0], properties);\n}\n\nexport { polygonToLine, coordsToLine, multiPolygonToLine, singlePolygonToLine };\nexport default polygonToLine;\n"],"mappings":";;;;;;;AAAA,SAASA,iBAAA,EAAmBC,UAAA,EAAYC,eAAA,QAAuB;AAU/D,SAASC,OAAA,QAAe;AAmBxB,SAASC,cAIPC,IAAA,EACAC,OAAA,GAAgC,CAAC,GAGoB;EACrD,MAAMC,IAAA,GAAYJ,OAAA,CAAQE,IAAI;EAC9B,IAAI,CAACC,OAAA,CAAQE,UAAA,IAAcH,IAAA,CAAKI,IAAA,KAAS,WAAW;IAClDH,OAAA,CAAQE,UAAA,GAAaH,IAAA,CAAKG,UAAA;EAC5B;EACA,QAAQD,IAAA,CAAKE,IAAA;IACX,KAAK;MACH,OAAOC,mBAAA,CAAoBH,IAAA,EAAMD,OAAO;IAC1C,KAAK;MACH,OAAOK,kBAAA,CAAmBJ,IAAA,EAAMD,OAAO;IACzC;MACE,MAAM,IAAIM,KAAA,CAAM,cAAc;EAClC;AACF;AArBSC,MAAA,CAAAT,aAAA;AA0BT,SAASM,oBAIPL,IAAA,EACAC,OAAA,GAAgC,CAAC,GACS;EAC1C,MAAMC,IAAA,GAAOJ,OAAA,CAAQE,IAAI;EACzB,MAAMS,MAAA,GAAgBP,IAAA,CAAKQ,WAAA;EAC3B,MAAMP,UAAA,GAAkBF,OAAA,CAAQE,UAAA,GAC5BF,OAAA,CAAQE,UAAA,GACRH,IAAA,CAAKI,IAAA,KAAS,YACZJ,IAAA,CAAKG,UAAA,GACL,CAAC;EAEP,OAAOQ,YAAA,CAAaF,MAAA,EAAQN,UAAU;AACxC;AAhBSK,MAAA,CAAAH,mBAAA;AAqBT,SAASC,mBAIPM,SAAA,EACAX,OAAA,GAA8B,CAAC,GACqB;EACpD,MAAMC,IAAA,GAAOJ,OAAA,CAAQc,SAAS;EAC9B,MAAMH,MAAA,GAAgBP,IAAA,CAAKQ,WAAA;EAC3B,MAAMP,UAAA,GAAkBF,OAAA,CAAQE,UAAA,GAC5BF,OAAA,CAAQE,UAAA,GACRS,SAAA,CAAUR,IAAA,KAAS,YACjBQ,SAAA,CAAUT,UAAA,GACV,CAAC;EAEP,MAAMU,KAAA,GAAyD,EAAC;EAChEJ,MAAA,CAAOK,OAAA,CAASC,KAAA,IAAU;IACxBF,KAAA,CAAMG,IAAA,CAAKL,YAAA,CAAaI,KAAA,EAAOZ,UAAU,CAAC;EAC5C,CAAC;EACD,OAAOR,iBAAA,CAAkBkB,KAAK;AAChC;AApBSL,MAAA,CAAAF,kBAAA;AAyBT,SAASK,aACPF,MAAA,EACAN,UAAA,EAC0C;EAC1C,IAAIM,MAAA,CAAOQ,MAAA,GAAS,GAAG;IACrB,OAAOpB,eAAA,CAAgBY,MAAA,EAAQN,UAAU;EAC3C;EACA,OAAOP,UAAA,CAAWa,MAAA,CAAO,CAAC,GAAGN,UAAU;AACzC;AARSK,MAAA,CAAAG,YAAA;AAWT,IAAOO,4BAAA,GAAQnB,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}