{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.js\nimport { centroid } from \"@turf/centroid\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { clone } from \"@turf/clone\";\nimport { coordEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { isObject } from \"@turf/helpers\";\nfunction transformRotate(geojson, angle, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === void 0 || angle === null || isNaN(angle)) throw new Error(\"angle is required\");\n  if (angle === 0) return geojson;\n  if (!pivot) pivot = centroid(geojson);\n  if (mutate === false || mutate === void 0) geojson = clone(geojson);\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n__name(transformRotate, \"transformRotate\");\nvar turf_transform_rotate_default = transformRotate;\nexport { turf_transform_rotate_default as default, transformRotate };","map":{"version":3,"names":["centroid","rhumbBearing","rhumbDistance","rhumbDestination","clone","coordEach","getCoords","isObject","transformRotate","geojson","angle","options","Error","pivot","mutate","isNaN","pointCoords","initialAngle","finalAngle","distance","newCoords","__name","turf_transform_rotate_default"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/transform-rotate/index.js"],"sourcesContent":["import { centroid } from \"@turf/centroid\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { clone } from \"@turf/clone\";\nimport { coordEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { isObject } from \"@turf/helpers\";\n\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle))\n    throw new Error(\"angle is required\");\n\n  // Shortcut no-rotation\n  if (angle === 0) return geojson;\n\n  // Use centroid of GeoJSON if pivot is not provided\n  if (!pivot) pivot = centroid(geojson);\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Rotate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport { transformRotate };\nexport default transformRotate;\n"],"mappings":";;;;;;;AAAA,SAASA,QAAA,QAAgB;AACzB,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,gBAAA,QAAwB;AACjC,SAASC,KAAA,QAAa;AACtB,SAASC,SAAA,QAAiB;AAC1B,SAASC,SAAA,QAAiB;AAC1B,SAASC,QAAA,QAAgB;AAqBzB,SAASC,gBAAgBC,OAAA,EAASC,KAAA,EAAOC,OAAA,EAAS;EAEhDA,OAAA,GAAUA,OAAA,IAAW,CAAC;EACtB,IAAI,CAACJ,QAAA,CAASI,OAAO,GAAG,MAAM,IAAIC,KAAA,CAAM,oBAAoB;EAC5D,IAAIC,KAAA,GAAQF,OAAA,CAAQE,KAAA;EACpB,IAAIC,MAAA,GAASH,OAAA,CAAQG,MAAA;EAGrB,IAAI,CAACL,OAAA,EAAS,MAAM,IAAIG,KAAA,CAAM,qBAAqB;EACnD,IAAIF,KAAA,KAAU,UAAaA,KAAA,KAAU,QAAQK,KAAA,CAAML,KAAK,GACtD,MAAM,IAAIE,KAAA,CAAM,mBAAmB;EAGrC,IAAIF,KAAA,KAAU,GAAG,OAAOD,OAAA;EAGxB,IAAI,CAACI,KAAA,EAAOA,KAAA,GAAQb,QAAA,CAASS,OAAO;EAGpC,IAAIK,MAAA,KAAW,SAASA,MAAA,KAAW,QAAWL,OAAA,GAAUL,KAAA,CAAMK,OAAO;EAGrEJ,SAAA,CAAUI,OAAA,EAAS,UAAUO,WAAA,EAAa;IACxC,IAAIC,YAAA,GAAehB,YAAA,CAAaY,KAAA,EAAOG,WAAW;IAClD,IAAIE,UAAA,GAAaD,YAAA,GAAeP,KAAA;IAChC,IAAIS,QAAA,GAAWjB,aAAA,CAAcW,KAAA,EAAOG,WAAW;IAC/C,IAAII,SAAA,GAAYd,SAAA,CAAUH,gBAAA,CAAiBU,KAAA,EAAOM,QAAA,EAAUD,UAAU,CAAC;IACvEF,WAAA,CAAY,CAAC,IAAII,SAAA,CAAU,CAAC;IAC5BJ,WAAA,CAAY,CAAC,IAAII,SAAA,CAAU,CAAC;EAC9B,CAAC;EACD,OAAOX,OAAA;AACT;AA/BSY,MAAA,CAAAb,eAAA;AAkCT,IAAOc,6BAAA,GAAQd,eAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}