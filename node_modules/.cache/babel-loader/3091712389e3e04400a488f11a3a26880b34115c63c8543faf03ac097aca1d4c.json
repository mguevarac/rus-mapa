{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// index.js\nimport earcut from \"earcut\";\nimport { polygon } from \"@turf/helpers\";\nfunction tesselate(poly) {\n  if (!poly.geometry || poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\") {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n  var fc = {\n    type: \"FeatureCollection\",\n    features: []\n  };\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n  return fc;\n}\n__name(tesselate, \"tesselate\");\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n  var features = [];\n  var vertices = [];\n  result.forEach(function (vert, i2) {\n    var index = result[i2];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n  return features;\n}\n__name(processPolygon, \"processPolygon\");\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n    result = {\n      vertices: [],\n      holes: [],\n      dimensions: dim\n    },\n    holeIndex = 0;\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n  return result;\n}\n__name(flattenCoords, \"flattenCoords\");\nvar turf_tesselate_default = tesselate;\nexport { turf_tesselate_default as default, tesselate };","map":{"version":3,"names":["earcut","polygon","tesselate","poly","geometry","type","Error","fc","features","processPolygon","coordinates","forEach","concat","__name","data","flattenCoords","dim","result","vertices","holes","vert","i2","index","push","i","length","coords","slice","dimensions","holeIndex","j","d","turf_tesselate_default"],"sources":["/Users/minaguevara/Desktop/Dev/web_dev/rus-map/node_modules/@turf/tesselate/index.js"],"sourcesContent":["import earcut from \"earcut\";\nimport { polygon } from \"@turf/helpers\";\n\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} poly the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * var triangles = turf.tesselate(poly);\n *\n * //addToMap\n * var addToMap = [poly, triangles]\n */\nfunction tesselate(poly) {\n  if (\n    !poly.geometry ||\n    (poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\")\n  ) {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n\n  var fc = { type: \"FeatureCollection\", features: [] };\n\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n\n  return fc;\n}\n\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n\n  var features = [];\n  var vertices = [];\n\n  result.forEach(function (vert, i) {\n    var index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n\n  return features;\n}\n\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n    result = { vertices: [], holes: [], dimensions: dim },\n    holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n}\n\nexport { tesselate };\nexport default tesselate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}